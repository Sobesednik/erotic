{"version":3,"sources":["../src/callback.js"],"names":["makeCallback","entryCaller","entryStack","shadow","cb","messageOrError","caller","arguments","stack","errorStack","Error","calleeStackLine","isError","message","stackHeading","entryHasCallee","stackMessage","join","properties","Object","assign"],"mappings":"kGAAA;AACA,4B;;;;AAIA;;;;;;;;AAQO,SAASA,YAAT,CAAsBC,WAAtB,EAAmCC,UAAnC,EAA+CC,SAAS,KAAxD,EAA+D;AACpE;;;;;;;AAOA,WAASC,EAAT,CAAYC,cAAZ,EAA4B;AAC1B,UAAMC,SAAS,iCAAuBC,SAAvB,CAAf;AACA,UAAM,EAAEC,OAAOC,UAAT,KAAwB,IAAIC,KAAJ,EAA9B;AACA,UAAMC,kBAAkB,6BAAmBF,UAAnB,CAAxB;AACA,UAAMG,UAAUP,0BAA0BK,KAA1C;AACA,UAAMG,UAAUD,UAAUP,eAAeQ,OAAzB,GAAmCR,cAAnD;;AAEA,UAAMS,eAAe,0BAAgBD,OAAhB,CAArB;AACA,UAAME,iBAAiBd,gBAAgBK,MAAvC;AACA,UAAMU,eAAe;AACnBF,gBADmB;AAEnB,QAAIC,kBAAkBZ,MAAlB,GAA2B,CAACD,UAAD,CAA3B,GAA0C;AAC5CS,mBAD4C;AAE5CT,cAF4C,CAA9C,CAFmB;;AAMnBe,QANmB,CAMd,IANc,CAArB;;AAQA,UAAMT,QAAQ,yBAAWQ,YAAX,CAAd;AACA,UAAME,aAAa,EAAEL,OAAF,EAAWL,KAAX,EAAnB;;AAEA,WAAOW,OAAOC,MAAP,CAAcR,UAAUP,cAAV,GAA2B,IAAIK,KAAJ,EAAzC,EAAsDQ,UAAtD,CAAP;AACD;;AAED,SAAOd,EAAP;AACD","sourcesContent":["import cleanStack from 'clean-stack'\nimport {\n  getCallerFromArguments, getCalleeStackLine, getStackHeading,\n} from './lib'\n\n/**\n * Create a callback\n * @function makeCallback\n * @param {function} entryCaller function which was called at entry\n * @param {string} entryStack first line of the error stack to be returned\n * @param {boolean} [shadow=false] print only entry stack\n * @private\n */\nexport function makeCallback(entryCaller, entryStack, shadow = false) {\n  /**\n   * This callback should be called when an asynchronous error occurred.\n   * @param {(string|Error)} messageOrError A message string or an Error object at\n   * the point of actual error.\n   * @returns {Error} An error with an updated stack which should be throw, or\n   * rejected with.\n   */\n  function cb(messageOrError) {\n    const caller = getCallerFromArguments(arguments)\n    const { stack: errorStack } = new Error()\n    const calleeStackLine = getCalleeStackLine(errorStack)\n    const isError = messageOrError instanceof Error\n    const message = isError ? messageOrError.message : messageOrError\n\n    const stackHeading = getStackHeading(message)\n    const entryHasCallee = entryCaller === caller\n    const stackMessage = [\n      stackHeading,\n      ...(entryHasCallee || shadow ? [entryStack] : [\n        calleeStackLine,\n        entryStack,\n      ]),\n    ].join('\\n')\n\n    const stack = cleanStack(stackMessage)\n    const properties = { message, stack }\n\n    return Object.assign(isError ? messageOrError : new Error(), properties)\n  }\n\n  return cb\n}\n"],"file":"callback.js"}