{"version":3,"sources":["../src/callback.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK;AAC5C,MAAM,CAAC;EACL,sBAAsB,CAAC,CAAC,kBAAkB,CAAC,CAAC,eAAe;AAC7D,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG;;;;;;;;;;AAUb,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;;;;;;EAMpE,QAAQ,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC;IAC1B,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,sBAAsB,CAAC,SAAS;IAC/C,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC;IACxC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,kBAAkB,CAAC,UAAU;IACrD,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC;IAC1C,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;;IAEnD,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,eAAe,CAAC,OAAO;IAC5C,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1D,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;MACnB,YAAY;MACZ,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAC5C,eAAe;QACf,UAAU;MACZ,CAAC,CAAC;IACJ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEX,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,YAAY;IACrC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;IACpC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC;;IAE/C,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU;EACpC;;EAEA,MAAM,CAAC;AACT","file":"callback.js","sourcesContent":["import cleanStack from '@artdeco/clean-stack'\nimport {\n  getCallerFromArguments, getCalleeStackLine, getStackHeading,\n} from './lib'\n\n/**\n * Create a callback\n * @function makeCallback\n * @param {function} entryCaller function which was called at entry\n * @param {string} entryStack first line of the error stack to be returned\n * @param {boolean} [shadow=false] print only entry stack\n * @private\n */\nexport function makeCallback(entryCaller, entryStack, shadow = false) {\n  /**\n   * This callback should be called when an asynchronous error occurred.\n   * @param {(string|Error)} messageOrError A message string or an _Error_ object at the point of actual error.\n   * @returns {Error} An error with the updated stack which includes the callee.\n   */\n  function cb(messageOrError) {\n    const caller = getCallerFromArguments(arguments)\n    const { stack: errorStack } = new Error()\n    const calleeStackLine = getCalleeStackLine(errorStack)\n    const isError = messageOrError instanceof Error\n    const message = isError ? messageOrError.message : messageOrError\n\n    const stackHeading = getStackHeading(message)\n    const entryHasCallee = caller !== null && entryCaller === caller\n    const stackMessage = [\n      stackHeading,\n      ...(entryHasCallee || shadow ? [entryStack] : [\n        calleeStackLine,\n        entryStack,\n      ]),\n    ].join('\\n')\n\n    const stack = cleanStack(stackMessage)\n    const properties = { message, stack }\n    const e = isError ? messageOrError : new Error()\n\n    return Object.assign(e, properties)\n  }\n\n  return cb\n}\n"]}